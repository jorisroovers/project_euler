########################################################################################################################
# Problem 12: Highly divisible triangular number
########################################################################################################################
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred 
# divisors?
########################################################################################################################
# NOTES
# - Not very elegant: Just a for loop around a prime generator and then sum up the results...
########################################################################################################################

def divisors(num):
    cur = 1
    end = num
    # we use a set to avoid situations where we add the middle 2 divisors twice
    divisors = set()
    while cur <= end:
        mod = num % cur
        end = num / cur
        if mod == 0:
            divisors.add(cur)
            divisors.add(end)
        cur += 1

    return sorted(divisors)

def triangle_number(n):
    # This formula is quite well-known -> makes the problem easier!
    return n*(n+1) / 2


def run(args):

    num_divisors = 0
    i = 0
    while num_divisors <= 500:
        i+=1
        triangle_num = triangle_number(i)
        div = divisors(triangle_num)
        num_divisors = len(div)
        if num_divisors % 50 == 0:
            print(i, triangle_num, num_divisors)

    print("FOUND IT")
    print(div)
    print("Solution: %i (%i nth triangle number, %i divisors)" % \
          (triangle_num, i, num_divisors))

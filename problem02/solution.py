########################################################################################################################
# Problem 2: Even Fibonacci numbers
########################################################################################################################
# Each new term in the Fibonacci sequence is generated by adding the previous 
# two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
########################################################################################################################
# NOTES
#
########################################################################################################################

from functools import reduce
from common.util import xfib

def print_usage(args):
    print("usage: python %s <range-end>" %  args[0])

def assert_correct_input(args):
    if len(args) != 2:
        print_usage()
        quit(1)

def run(args):

    assert_correct_input(args)
    end = int(args[1])

    # find all fibonacci numbers that we need
    even_fibs = []
    for f in xfib():
        if f > end:
            break
        if (f % 2 == 0):
            even_fibs.append(f)

    print(f"Even Fibonacci numbers, smaller then {end}:")
    print(even_fibs)

    # obviously, we can do this more efficient by adding them up in the loop
    # but that's not the point here :-)
    solution = reduce(lambda x, y: x+y, even_fibs)

    print("Solution: ", solution)
